//
//  CustomIcons.swift
//  WISEComponents
//
//  Created by Szabolcs Toth on 08.08.2022.
//  Copyright Â© 2022 purzelbaum.hu. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CustomIcons : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfIconAdd: UIImage?
        static var iconAddTargets: [AnyObject]?
        static var imageOfIconArrow: UIImage?
        static var iconArrowTargets: [AnyObject]?
        static var imageOfIconCalendar: UIImage?
        static var iconCalendarTargets: [AnyObject]?
        static var imageOfIconCheck: UIImage?
        static var iconCheckTargets: [AnyObject]?
        static var imageOfIconClose: UIImage?
        static var iconCloseTargets: [AnyObject]?
        static var imageOfIconEdit: UIImage?
        static var iconEditTargets: [AnyObject]?
        static var imageOfIconFlag: UIImage?
        static var iconFlagTargets: [AnyObject]?
        static var imageOfIconLocation: UIImage?
        static var iconLocationTargets: [AnyObject]?
        static var imageOfIconSearch: UIImage?
        static var iconSearchTargets: [AnyObject]?
        static var imageOfIconWarning: UIImage?
        static var iconWarningTargets: [AnyObject]?
        static var imageOfIconBackButton: UIImage?
        static var iconBackButtonTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawIconAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 31, y: 17.9))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 19.4), controlPoint1: CGPoint(x: 31, y: 18.7), controlPoint2: CGPoint(x: 30.3, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 30.5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 32), controlPoint1: CGPoint(x: 18.6, y: 31.3), controlPoint2: CGPoint(x: 17.9, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 15.6, y: 30.5), controlPoint1: CGPoint(x: 16.3, y: 32), controlPoint2: CGPoint(x: 15.6, y: 31.3))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 19.4))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 17.9), controlPoint1: CGPoint(x: 3.7, y: 19.4), controlPoint2: CGPoint(x: 3, y: 18.7))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 16.4), controlPoint1: CGPoint(x: 3, y: 17.1), controlPoint2: CGPoint(x: 3.7, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 5.5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 4), controlPoint1: CGPoint(x: 15.6, y: 4.7), controlPoint2: CGPoint(x: 16.3, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 18.6, y: 5.5), controlPoint1: CGPoint(x: 17.9, y: 4), controlPoint2: CGPoint(x: 18.6, y: 4.7))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 29.5, y: 16.4))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 17.9), controlPoint1: CGPoint(x: 30.3, y: 16.4), controlPoint2: CGPoint(x: 31, y: 17.1))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.3, y: 15.85))
        bezierPath.addCurve(to: CGPoint(x: 24.3, y: 16.15), controlPoint1: CGPoint(x: 24.3, y: 15.95), controlPoint2: CGPoint(x: 24.3, y: 16.05))
        bezierPath.addCurve(to: CGPoint(x: 23.9, y: 16.95), controlPoint1: CGPoint(x: 24.3, y: 16.45), controlPoint2: CGPoint(x: 24.1, y: 16.75))
        bezierPath.addLine(to: CGPoint(x: 11.7, y: 29.15))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 29.15), controlPoint1: CGPoint(x: 11.1, y: 29.75), controlPoint2: CGPoint(x: 10.1, y: 29.75))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 28.05), controlPoint1: CGPoint(x: 9.2, y: 28.85), controlPoint2: CGPoint(x: 9, y: 28.45))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 26.95), controlPoint1: CGPoint(x: 9, y: 27.65), controlPoint2: CGPoint(x: 9.1, y: 27.25))
        bezierPath.addLine(to: CGPoint(x: 20.7, y: 15.75))
        bezierPath.addLine(to: CGPoint(x: 9.4, y: 4.65))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 3.55), controlPoint1: CGPoint(x: 9.1, y: 4.35), controlPoint2: CGPoint(x: 9, y: 3.95))
        bezierPath.addCurve(to: CGPoint(x: 9.4, y: 2.45), controlPoint1: CGPoint(x: 9, y: 3.15), controlPoint2: CGPoint(x: 9.1, y: 2.75))
        bezierPath.addCurve(to: CGPoint(x: 11.6, y: 2.45), controlPoint1: CGPoint(x: 10, y: 1.85), controlPoint2: CGPoint(x: 11, y: 1.85))
        bezierPath.addLine(to: CGPoint(x: 23.8, y: 14.65))
        bezierPath.addCurve(to: CGPoint(x: 24.3, y: 15.85), controlPoint1: CGPoint(x: 24.1, y: 14.95), controlPoint2: CGPoint(x: 24.3, y: 15.45))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Rectangle
        let rectanglePath = UIBezierPath(rect: CGRect(x: 2.03, y: 2, width: 27.35, height: 28))
        rectanglePath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 28.31, y: 12.78))
        bezierPath.addLine(to: CGPoint(x: 28.31, y: 25.03))
        bezierPath.addCurve(to: CGPoint(x: 24.29, y: 29.05), controlPoint1: CGPoint(x: 28.31, y: 27.25), controlPoint2: CGPoint(x: 26.51, y: 29.05))
        bezierPath.addLine(to: CGPoint(x: 7.07, y: 29.05))
        bezierPath.addCurve(to: CGPoint(x: 3.06, y: 25.03), controlPoint1: CGPoint(x: 4.85, y: 29.05), controlPoint2: CGPoint(x: 3.06, y: 27.25))
        bezierPath.addLine(to: CGPoint(x: 3.06, y: 12.78))
        bezierPath.addLine(to: CGPoint(x: 28.31, y: 12.78))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 28.31, y: 11.3))
        bezier2Path.addLine(to: CGPoint(x: 28.31, y: 12.67))
        bezier2Path.addLine(to: CGPoint(x: 3.06, y: 12.67))
        bezier2Path.addLine(to: CGPoint(x: 3.06, y: 11.3))
        bezier2Path.addCurve(to: CGPoint(x: 7.07, y: 7.28), controlPoint1: CGPoint(x: 3.06, y: 9.08), controlPoint2: CGPoint(x: 4.85, y: 7.28))
        bezier2Path.addLine(to: CGPoint(x: 7.6, y: 7.28))
        bezier2Path.addCurve(to: CGPoint(x: 7.6, y: 4.43), controlPoint1: CGPoint(x: 7.6, y: 6.33), controlPoint2: CGPoint(x: 7.6, y: 5.38))
        bezier2Path.addCurve(to: CGPoint(x: 8.97, y: 3.06), controlPoint1: CGPoint(x: 7.49, y: 3.69), controlPoint2: CGPoint(x: 8.13, y: 3.06))
        bezier2Path.addCurve(to: CGPoint(x: 10.45, y: 4.54), controlPoint1: CGPoint(x: 9.71, y: 3.06), controlPoint2: CGPoint(x: 10.45, y: 3.69))
        bezier2Path.addLine(to: CGPoint(x: 10.45, y: 7.39))
        bezier2Path.addLine(to: CGPoint(x: 20.6, y: 7.39))
        bezier2Path.addCurve(to: CGPoint(x: 20.6, y: 4.54), controlPoint1: CGPoint(x: 20.6, y: 6.44), controlPoint2: CGPoint(x: 20.6, y: 5.49))
        bezier2Path.addCurve(to: CGPoint(x: 22.08, y: 3.06), controlPoint1: CGPoint(x: 20.6, y: 3.69), controlPoint2: CGPoint(x: 21.23, y: 3.06))
        bezier2Path.addCurve(to: CGPoint(x: 23.55, y: 4.54), controlPoint1: CGPoint(x: 22.92, y: 3.06), controlPoint2: CGPoint(x: 23.55, y: 3.69))
        bezier2Path.addCurve(to: CGPoint(x: 23.55, y: 7.39), controlPoint1: CGPoint(x: 23.55, y: 5.49), controlPoint2: CGPoint(x: 23.55, y: 6.44))
        bezier2Path.addLine(to: CGPoint(x: 24.51, y: 7.39))
        bezier2Path.addCurve(to: CGPoint(x: 28.31, y: 11.3), controlPoint1: CGPoint(x: 26.51, y: 7.39), controlPoint2: CGPoint(x: 28.31, y: 9.18))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 23.13, y: 25.56))
        bezier3Path.addLine(to: CGPoint(x: 20.17, y: 25.56))
        bezier3Path.addCurve(to: CGPoint(x: 18.59, y: 23.98), controlPoint1: CGPoint(x: 19.33, y: 25.56), controlPoint2: CGPoint(x: 18.59, y: 24.82))
        bezier3Path.addLine(to: CGPoint(x: 18.59, y: 21.02))
        bezier3Path.addCurve(to: CGPoint(x: 20.17, y: 19.43), controlPoint1: CGPoint(x: 18.59, y: 20.17), controlPoint2: CGPoint(x: 19.33, y: 19.43))
        bezier3Path.addLine(to: CGPoint(x: 23.13, y: 19.43))
        bezier3Path.addCurve(to: CGPoint(x: 24.72, y: 21.02), controlPoint1: CGPoint(x: 23.98, y: 19.43), controlPoint2: CGPoint(x: 24.72, y: 20.17))
        bezier3Path.addLine(to: CGPoint(x: 24.72, y: 23.98))
        bezier3Path.addCurve(to: CGPoint(x: 23.13, y: 25.56), controlPoint1: CGPoint(x: 24.72, y: 24.82), controlPoint2: CGPoint(x: 23.98, y: 25.56))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconCheck(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 28.6, y: 7.52))
        bezierPath.addCurve(to: CGPoint(x: 28.2, y: 8.52), controlPoint1: CGPoint(x: 28.6, y: 7.82), controlPoint2: CGPoint(x: 28.5, y: 8.22))
        bezierPath.addLine(to: CGPoint(x: 11.8, y: 27.42))
        bezierPath.addCurve(to: CGPoint(x: 10.6, y: 27.92), controlPoint1: CGPoint(x: 11.5, y: 27.72), controlPoint2: CGPoint(x: 11.1, y: 27.92))
        bezierPath.addCurve(to: CGPoint(x: 9.6, y: 27.52), controlPoint1: CGPoint(x: 10.2, y: 27.92), controlPoint2: CGPoint(x: 9.9, y: 27.82))
        bezierPath.addLine(to: CGPoint(x: 2.5, y: 21.32))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 20.22), controlPoint1: CGPoint(x: 2.2, y: 21.02), controlPoint2: CGPoint(x: 2, y: 20.62))
        bezierPath.addCurve(to: CGPoint(x: 2.4, y: 19.22), controlPoint1: CGPoint(x: 2, y: 19.82), controlPoint2: CGPoint(x: 2.1, y: 19.52))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 19.12), controlPoint1: CGPoint(x: 3, y: 18.62), controlPoint2: CGPoint(x: 3.9, y: 18.52))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 24.32))
        bezierPath.addLine(to: CGPoint(x: 25.9, y: 6.52))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 6.32), controlPoint1: CGPoint(x: 26.5, y: 5.92), controlPoint2: CGPoint(x: 27.4, y: 5.82))
        bezierPath.addCurve(to: CGPoint(x: 28.6, y: 7.52), controlPoint1: CGPoint(x: 28.4, y: 6.72), controlPoint2: CGPoint(x: 28.6, y: 7.12))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconClose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 28.14, y: 3.56))
        bezierPath.addCurve(to: CGPoint(x: 28.14, y: 6.19), controlPoint1: CGPoint(x: 28.89, y: 4.31), controlPoint2: CGPoint(x: 28.89, y: 5.44))
        bezierPath.addLine(to: CGPoint(x: 18.64, y: 15.94))
        bezierPath.addLine(to: CGPoint(x: 28.52, y: 25.69))
        bezierPath.addCurve(to: CGPoint(x: 28.52, y: 28.31), controlPoint1: CGPoint(x: 29.27, y: 26.44), controlPoint2: CGPoint(x: 29.27, y: 27.56))
        bezierPath.addCurve(to: CGPoint(x: 25.89, y: 28.31), controlPoint1: CGPoint(x: 27.77, y: 29.06), controlPoint2: CGPoint(x: 26.64, y: 29.06))
        bezierPath.addLine(to: CGPoint(x: 16.02, y: 18.56))
        bezierPath.addLine(to: CGPoint(x: 6.27, y: 28.44))
        bezierPath.addCurve(to: CGPoint(x: 3.64, y: 28.44), controlPoint1: CGPoint(x: 5.52, y: 29.19), controlPoint2: CGPoint(x: 4.39, y: 29.19))
        bezierPath.addCurve(to: CGPoint(x: 3.64, y: 25.81), controlPoint1: CGPoint(x: 2.89, y: 27.69), controlPoint2: CGPoint(x: 2.89, y: 26.56))
        bezierPath.addLine(to: CGPoint(x: 13.39, y: 15.94))
        bezierPath.addLine(to: CGPoint(x: 3.52, y: 6.31))
        bezierPath.addCurve(to: CGPoint(x: 3.52, y: 3.69), controlPoint1: CGPoint(x: 2.89, y: 5.56), controlPoint2: CGPoint(x: 2.77, y: 4.44))
        bezierPath.addCurve(to: CGPoint(x: 6.14, y: 3.69), controlPoint1: CGPoint(x: 4.27, y: 2.94), controlPoint2: CGPoint(x: 5.39, y: 2.94))
        bezierPath.addLine(to: CGPoint(x: 15.89, y: 13.31))
        bezierPath.addLine(to: CGPoint(x: 25.52, y: 3.56))
        bezierPath.addCurve(to: CGPoint(x: 28.14, y: 3.56), controlPoint1: CGPoint(x: 26.27, y: 2.81), controlPoint2: CGPoint(x: 27.39, y: 2.81))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconEdit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// iconEdit
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Rectangle
        let rectanglePath = UIBezierPath(rect: CGRect(x: 3, y: 1, width: 26.8, height: 28.7))
        rectanglePath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 27.5, y: 10.4))
        bezierPath.addLine(to: CGPoint(x: 25.3, y: 12.8))
        bezierPath.addCurve(to: CGPoint(x: 21.7, y: 8.4), controlPoint1: CGPoint(x: 24.6, y: 11.6), controlPoint2: CGPoint(x: 23.5, y: 9.9))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 6), controlPoint1: CGPoint(x: 20.4, y: 7.2), controlPoint2: CGPoint(x: 19.1, y: 6.5))
        bezierPath.addLine(to: CGPoint(x: 20.1, y: 3.7))
        bezierPath.addCurve(to: CGPoint(x: 27.2, y: 3.4), controlPoint1: CGPoint(x: 22, y: 1.7), controlPoint2: CGPoint(x: 25.1, y: 1.5))
        bezierPath.addCurve(to: CGPoint(x: 27.5, y: 10.4), controlPoint1: CGPoint(x: 29.3, y: 5.2), controlPoint2: CGPoint(x: 29.4, y: 8.4))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 25.3, y: 12.8))
        bezier2Path.addLine(to: CGPoint(x: 14.5, y: 24.7))
        bezier2Path.addCurve(to: CGPoint(x: 14.1, y: 25.1), controlPoint1: CGPoint(x: 14.4, y: 24.8), controlPoint2: CGPoint(x: 14.3, y: 24.9))
        bezier2Path.addCurve(to: CGPoint(x: 12.2, y: 26.5), controlPoint1: CGPoint(x: 13.9, y: 25.3), controlPoint2: CGPoint(x: 13.3, y: 25.8))
        bezier2Path.addCurve(to: CGPoint(x: 10.2, y: 27.5), controlPoint1: CGPoint(x: 12, y: 26.6), controlPoint2: CGPoint(x: 11.1, y: 27.1))
        bezier2Path.addCurve(to: CGPoint(x: 4.1, y: 28.8), controlPoint1: CGPoint(x: 7.7, y: 28.5), controlPoint2: CGPoint(x: 5.5, y: 28.7))
        bezier2Path.addCurve(to: CGPoint(x: 4.7, y: 22.7), controlPoint1: CGPoint(x: 4, y: 27.5), controlPoint2: CGPoint(x: 3.9, y: 25.2))
        bezier2Path.addCurve(to: CGPoint(x: 6.8, y: 18.5), controlPoint1: CGPoint(x: 5, y: 21.8), controlPoint2: CGPoint(x: 5.5, y: 20.1))
        bezier2Path.addCurve(to: CGPoint(x: 7.1, y: 17.9), controlPoint1: CGPoint(x: 6.9, y: 18.1), controlPoint2: CGPoint(x: 7, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 18, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 21.7, y: 8.4), controlPoint1: CGPoint(x: 19.1, y: 6.5), controlPoint2: CGPoint(x: 20.4, y: 7.3))
        bezier2Path.addCurve(to: CGPoint(x: 25.3, y: 12.8), controlPoint1: CGPoint(x: 23.5, y: 10), controlPoint2: CGPoint(x: 24.6, y: 11.6))
        bezier2Path.close()
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconFlag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Group 129.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11, y: 3.3))
        bezierPath.addCurve(to: CGPoint(x: 29.4, y: 11.8), controlPoint1: CGPoint(x: 17.1, y: 6.1), controlPoint2: CGPoint(x: 23.3, y: 8.9))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 21), controlPoint1: CGPoint(x: 23.3, y: 14.9), controlPoint2: CGPoint(x: 17.1, y: 17.9))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 3.3), controlPoint1: CGPoint(x: 11, y: 15.1), controlPoint2: CGPoint(x: 11, y: 9.2))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 1.92
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 6.5, y: 30))
        bezier2Path.addCurve(to: CGPoint(x: 5, y: 28.5), controlPoint1: CGPoint(x: 5.7, y: 30), controlPoint2: CGPoint(x: 5, y: 29.3))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 3.5))
        bezier2Path.addCurve(to: CGPoint(x: 6.5, y: 2), controlPoint1: CGPoint(x: 5, y: 2.7), controlPoint2: CGPoint(x: 5.7, y: 2))
        bezier2Path.addCurve(to: CGPoint(x: 8, y: 3.5), controlPoint1: CGPoint(x: 7.3, y: 2), controlPoint2: CGPoint(x: 8, y: 2.7))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 28.5))
        bezier2Path.addCurve(to: CGPoint(x: 6.5, y: 30), controlPoint1: CGPoint(x: 8, y: 29.4), controlPoint2: CGPoint(x: 7.3, y: 30))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconLocation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 144.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.7, y: 30))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 25.25), controlPoint1: CGPoint(x: 13.99, y: 28.18), controlPoint2: CGPoint(x: 12.67, y: 26.46))
        bezierPath.addCurve(to: CGPoint(x: 6.3, y: 14.03), controlPoint1: CGPoint(x: 11.76, y: 25.25), controlPoint2: CGPoint(x: 7.52, y: 19.39))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 11.7), controlPoint1: CGPoint(x: 6, y: 12.82), controlPoint2: CGPoint(x: 6, y: 11.7))
        bezierPath.addCurve(to: CGPoint(x: 6.2, y: 9.78), controlPoint1: CGPoint(x: 6, y: 11.7), controlPoint2: CGPoint(x: 6, y: 10.69))
        bezierPath.addCurve(to: CGPoint(x: 15.7, y: 2), controlPoint1: CGPoint(x: 7.11, y: 5.34), controlPoint2: CGPoint(x: 11.05, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 25.21, y: 9.78), controlPoint1: CGPoint(x: 20.35, y: 2), controlPoint2: CGPoint(x: 24.3, y: 5.34))
        bezierPath.addCurve(to: CGPoint(x: 25.41, y: 11.7), controlPoint1: CGPoint(x: 25.41, y: 10.79), controlPoint2: CGPoint(x: 25.41, y: 11.7))
        bezierPath.addCurve(to: CGPoint(x: 25.1, y: 14.03), controlPoint1: CGPoint(x: 25.41, y: 11.7), controlPoint2: CGPoint(x: 25.41, y: 12.82))
        bezierPath.addCurve(to: CGPoint(x: 19.65, y: 25.25), controlPoint1: CGPoint(x: 23.79, y: 19.39), controlPoint2: CGPoint(x: 19.65, y: 25.25))
        bezierPath.addCurve(to: CGPoint(x: 15.7, y: 30), controlPoint1: CGPoint(x: 18.74, y: 26.46), controlPoint2: CGPoint(x: 17.42, y: 28.18))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 9.35, y: 5.31, width: 12.7, height: 12.7))
        fillColor3.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 27.12, y: 28.38))
        bezierPath.addLine(to: CGPoint(x: 22.63, y: 22.63))
        bezierPath.addCurve(to: CGPoint(x: 25.87, y: 15.95), controlPoint1: CGPoint(x: 24.41, y: 20.86), controlPoint2: CGPoint(x: 25.56, y: 18.56))
        bezierPath.addCurve(to: CGPoint(x: 15.95, y: 3.1), controlPoint1: CGPoint(x: 26.7, y: 9.68), controlPoint2: CGPoint(x: 22.21, y: 3.94))
        bezierPath.addCurve(to: CGPoint(x: 3.1, y: 13.02), controlPoint1: CGPoint(x: 9.68, y: 2.26), controlPoint2: CGPoint(x: 3.94, y: 6.76))
        bezierPath.addCurve(to: CGPoint(x: 13.02, y: 25.87), controlPoint1: CGPoint(x: 2.26, y: 19.29), controlPoint2: CGPoint(x: 6.76, y: 25.03))
        bezierPath.addCurve(to: CGPoint(x: 20.02, y: 24.51), controlPoint1: CGPoint(x: 15.53, y: 26.18), controlPoint2: CGPoint(x: 18.04, y: 25.66))
        bezierPath.addLine(to: CGPoint(x: 24.51, y: 30.36))
        bezierPath.addCurve(to: CGPoint(x: 26.7, y: 30.67), controlPoint1: CGPoint(x: 25.03, y: 31.09), controlPoint2: CGPoint(x: 26.08, y: 31.2))
        bezierPath.addCurve(to: CGPoint(x: 27.12, y: 28.38), controlPoint1: CGPoint(x: 27.54, y: 30.05), controlPoint2: CGPoint(x: 27.64, y: 29))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.71, y: 13.34))
        bezierPath.addCurve(to: CGPoint(x: 15.63, y: 5.61), controlPoint1: CGPoint(x: 6.34, y: 8.43), controlPoint2: CGPoint(x: 10.72, y: 4.98))
        bezierPath.addCurve(to: CGPoint(x: 23.36, y: 15.53), controlPoint1: CGPoint(x: 20.54, y: 6.23), controlPoint2: CGPoint(x: 23.99, y: 10.62))
        bezierPath.addCurve(to: CGPoint(x: 13.44, y: 23.26), controlPoint1: CGPoint(x: 22.74, y: 20.44), controlPoint2: CGPoint(x: 18.35, y: 23.88))
        bezierPath.addCurve(to: CGPoint(x: 5.71, y: 13.34), controlPoint1: CGPoint(x: 8.53, y: 22.63), controlPoint2: CGPoint(x: 5.08, y: 18.24))
        bezierPath.close()
        fillColor2.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconWarning(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Rectangle
        let rectanglePath = UIBezierPath(rect: CGRect(x: 2, y: 2, width: 27.7, height: 28))
        rectanglePath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.49, y: 27.51))
        bezierPath.addLine(to: CGPoint(x: 15.85, y: 4.49))
        bezierPath.addLine(to: CGPoint(x: 27.21, y: 27.51))
        bezierPath.addLine(to: CGPoint(x: 4.49, y: 27.51))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 5
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 14.88, y: 10.11, width: 1.95, height: 10.2), cornerRadius: 0.98)
        fillColor3.setFill()
        rectangle2Path.fill()
        strokeColor3.setStroke()
        rectangle2Path.lineWidth = 1.13
        rectangle2Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 14.85, y: 23.38, width: 2, height: 2))
        fillColor3.setFill()
        ovalPath.fill()
        strokeColor3.setStroke()
        ovalPath.lineWidth = 1.32
        ovalPath.stroke()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIconBackButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 73, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 73, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 73, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// backButton.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25.6, y: 19))
        bezierPath.addLine(to: CGPoint(x: 25.6, y: 4.45))
        bezierPath.addLine(to: CGPoint(x: 30.92, y: 4.45))
        bezierPath.addCurve(to: CGPoint(x: 33.49, y: 4.97), controlPoint1: CGPoint(x: 31.96, y: 4.45), controlPoint2: CGPoint(x: 32.81, y: 4.62))
        bezierPath.addCurve(to: CGPoint(x: 35.01, y: 6.34), controlPoint1: CGPoint(x: 34.17, y: 5.3), controlPoint2: CGPoint(x: 34.67, y: 5.76))
        bezierPath.addCurve(to: CGPoint(x: 35.51, y: 8.28), controlPoint1: CGPoint(x: 35.34, y: 6.91), controlPoint2: CGPoint(x: 35.51, y: 7.56))
        bezierPath.addCurve(to: CGPoint(x: 35.18, y: 9.81), controlPoint1: CGPoint(x: 35.51, y: 8.88), controlPoint2: CGPoint(x: 35.4, y: 9.39))
        bezierPath.addCurve(to: CGPoint(x: 34.28, y: 10.8), controlPoint1: CGPoint(x: 34.96, y: 10.22), controlPoint2: CGPoint(x: 34.66, y: 10.55))
        bezierPath.addCurve(to: CGPoint(x: 33.06, y: 11.34), controlPoint1: CGPoint(x: 33.91, y: 11.05), controlPoint2: CGPoint(x: 33.51, y: 11.23))
        bezierPath.addLine(to: CGPoint(x: 33.06, y: 11.49))
        bezierPath.addCurve(to: CGPoint(x: 34.48, y: 11.95), controlPoint1: CGPoint(x: 33.55, y: 11.51), controlPoint2: CGPoint(x: 34.02, y: 11.67))
        bezierPath.addCurve(to: CGPoint(x: 35.63, y: 13.17), controlPoint1: CGPoint(x: 34.94, y: 12.24), controlPoint2: CGPoint(x: 35.32, y: 12.64))
        bezierPath.addCurve(to: CGPoint(x: 36.08, y: 15.09), controlPoint1: CGPoint(x: 35.93, y: 13.69), controlPoint2: CGPoint(x: 36.08, y: 14.33))
        bezierPath.addCurve(to: CGPoint(x: 35.56, y: 17.09), controlPoint1: CGPoint(x: 36.08, y: 15.83), controlPoint2: CGPoint(x: 35.91, y: 16.5))
        bezierPath.addCurve(to: CGPoint(x: 33.95, y: 18.49), controlPoint1: CGPoint(x: 35.21, y: 17.68), controlPoint2: CGPoint(x: 34.67, y: 18.14))
        bezierPath.addCurve(to: CGPoint(x: 31.17, y: 19), controlPoint1: CGPoint(x: 33.23, y: 18.83), controlPoint2: CGPoint(x: 32.3, y: 19))
        bezierPath.addLine(to: CGPoint(x: 25.6, y: 19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27.79, y: 17.12))
        bezierPath.addLine(to: CGPoint(x: 30.96, y: 17.12))
        bezierPath.addCurve(to: CGPoint(x: 33.22, y: 16.51), controlPoint1: CGPoint(x: 32.01, y: 17.12), controlPoint2: CGPoint(x: 32.76, y: 16.91))
        bezierPath.addCurve(to: CGPoint(x: 33.9, y: 14.98), controlPoint1: CGPoint(x: 33.67, y: 16.1), controlPoint2: CGPoint(x: 33.9, y: 15.59))
        bezierPath.addCurve(to: CGPoint(x: 33.55, y: 13.72), controlPoint1: CGPoint(x: 33.9, y: 14.52), controlPoint2: CGPoint(x: 33.78, y: 14.1))
        bezierPath.addCurve(to: CGPoint(x: 32.56, y: 12.8), controlPoint1: CGPoint(x: 33.32, y: 13.33), controlPoint2: CGPoint(x: 32.99, y: 13.03))
        bezierPath.addCurve(to: CGPoint(x: 31.04, y: 12.46), controlPoint1: CGPoint(x: 32.13, y: 12.57), controlPoint2: CGPoint(x: 31.63, y: 12.46))
        bezierPath.addLine(to: CGPoint(x: 27.79, y: 12.46))
        bezierPath.addLine(to: CGPoint(x: 27.79, y: 17.12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27.79, y: 10.75))
        bezierPath.addLine(to: CGPoint(x: 30.73, y: 10.75))
        bezierPath.addCurve(to: CGPoint(x: 32.06, y: 10.46), controlPoint1: CGPoint(x: 31.23, y: 10.75), controlPoint2: CGPoint(x: 31.67, y: 10.65))
        bezierPath.addCurve(to: CGPoint(x: 33.01, y: 9.67), controlPoint1: CGPoint(x: 32.46, y: 10.27), controlPoint2: CGPoint(x: 32.77, y: 10.01))
        bezierPath.addCurve(to: CGPoint(x: 33.36, y: 8.45), controlPoint1: CGPoint(x: 33.24, y: 9.32), controlPoint2: CGPoint(x: 33.36, y: 8.91))
        bezierPath.addCurve(to: CGPoint(x: 32.73, y: 6.93), controlPoint1: CGPoint(x: 33.36, y: 7.84), controlPoint2: CGPoint(x: 33.15, y: 7.34))
        bezierPath.addCurve(to: CGPoint(x: 30.79, y: 6.32), controlPoint1: CGPoint(x: 32.31, y: 6.53), controlPoint2: CGPoint(x: 31.66, y: 6.32))
        bezierPath.addLine(to: CGPoint(x: 27.79, y: 6.32))
        bezierPath.addLine(to: CGPoint(x: 27.79, y: 10.75))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 42.09, y: 19.24))
        bezierPath.addCurve(to: CGPoint(x: 40.21, y: 18.86), controlPoint1: CGPoint(x: 41.4, y: 19.24), controlPoint2: CGPoint(x: 40.77, y: 19.11))
        bezierPath.addCurve(to: CGPoint(x: 38.89, y: 17.73), controlPoint1: CGPoint(x: 39.65, y: 18.6), controlPoint2: CGPoint(x: 39.21, y: 18.22))
        bezierPath.addCurve(to: CGPoint(x: 38.4, y: 15.92), controlPoint1: CGPoint(x: 38.56, y: 17.24), controlPoint2: CGPoint(x: 38.4, y: 16.63))
        bezierPath.addCurve(to: CGPoint(x: 38.76, y: 14.4), controlPoint1: CGPoint(x: 38.4, y: 15.3), controlPoint2: CGPoint(x: 38.52, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 39.72, y: 13.45), controlPoint1: CGPoint(x: 38.99, y: 14), controlPoint2: CGPoint(x: 39.31, y: 13.69))
        bezierPath.addCurve(to: CGPoint(x: 41.07, y: 12.93), controlPoint1: CGPoint(x: 40.12, y: 13.22), controlPoint2: CGPoint(x: 40.57, y: 13.05))
        bezierPath.addCurve(to: CGPoint(x: 42.59, y: 12.66), controlPoint1: CGPoint(x: 41.56, y: 12.81), controlPoint2: CGPoint(x: 42.07, y: 12.72))
        bezierPath.addCurve(to: CGPoint(x: 44.18, y: 12.47), controlPoint1: CGPoint(x: 43.24, y: 12.58), controlPoint2: CGPoint(x: 43.77, y: 12.52))
        bezierPath.addCurve(to: CGPoint(x: 45.06, y: 12.22), controlPoint1: CGPoint(x: 44.58, y: 12.42), controlPoint2: CGPoint(x: 44.88, y: 12.34))
        bezierPath.addCurve(to: CGPoint(x: 45.34, y: 11.67), controlPoint1: CGPoint(x: 45.25, y: 12.11), controlPoint2: CGPoint(x: 45.34, y: 11.93))
        bezierPath.addLine(to: CGPoint(x: 45.34, y: 11.62))
        bezierPath.addCurve(to: CGPoint(x: 44.82, y: 10.18), controlPoint1: CGPoint(x: 45.34, y: 11), controlPoint2: CGPoint(x: 45.17, y: 10.52))
        bezierPath.addCurve(to: CGPoint(x: 43.27, y: 9.67), controlPoint1: CGPoint(x: 44.47, y: 9.84), controlPoint2: CGPoint(x: 43.95, y: 9.67))
        bezierPath.addCurve(to: CGPoint(x: 41.58, y: 10.14), controlPoint1: CGPoint(x: 42.55, y: 9.67), controlPoint2: CGPoint(x: 41.99, y: 9.83))
        bezierPath.addCurve(to: CGPoint(x: 40.73, y: 11.19), controlPoint1: CGPoint(x: 41.17, y: 10.46), controlPoint2: CGPoint(x: 40.89, y: 10.8))
        bezierPath.addLine(to: CGPoint(x: 38.74, y: 10.73))
        bezierPath.addCurve(to: CGPoint(x: 39.77, y: 9.13), controlPoint1: CGPoint(x: 38.97, y: 10.07), controlPoint2: CGPoint(x: 39.32, y: 9.54))
        bezierPath.addCurve(to: CGPoint(x: 41.36, y: 8.23), controlPoint1: CGPoint(x: 40.23, y: 8.72), controlPoint2: CGPoint(x: 40.76, y: 8.42))
        bezierPath.addCurve(to: CGPoint(x: 43.24, y: 7.95), controlPoint1: CGPoint(x: 41.95, y: 8.04), controlPoint2: CGPoint(x: 42.58, y: 7.95))
        bezierPath.addCurve(to: CGPoint(x: 44.62, y: 8.11), controlPoint1: CGPoint(x: 43.67, y: 7.95), controlPoint2: CGPoint(x: 44.14, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 46, y: 8.66), controlPoint1: CGPoint(x: 45.12, y: 8.2), controlPoint2: CGPoint(x: 45.58, y: 8.39))
        bezierPath.addCurve(to: CGPoint(x: 47.06, y: 9.82), controlPoint1: CGPoint(x: 46.43, y: 8.93), controlPoint2: CGPoint(x: 46.79, y: 9.31))
        bezierPath.addCurve(to: CGPoint(x: 47.47, y: 11.76), controlPoint1: CGPoint(x: 47.33, y: 10.31), controlPoint2: CGPoint(x: 47.47, y: 10.96))
        bezierPath.addLine(to: CGPoint(x: 47.47, y: 19))
        bezierPath.addLine(to: CGPoint(x: 45.4, y: 19))
        bezierPath.addLine(to: CGPoint(x: 45.4, y: 17.51))
        bezierPath.addLine(to: CGPoint(x: 45.31, y: 17.51))
        bezierPath.addCurve(to: CGPoint(x: 44.69, y: 18.32), controlPoint1: CGPoint(x: 45.18, y: 17.78), controlPoint2: CGPoint(x: 44.97, y: 18.05))
        bezierPath.addCurve(to: CGPoint(x: 43.64, y: 18.98), controlPoint1: CGPoint(x: 44.42, y: 18.58), controlPoint2: CGPoint(x: 44.07, y: 18.8))
        bezierPath.addCurve(to: CGPoint(x: 42.09, y: 19.24), controlPoint1: CGPoint(x: 43.21, y: 19.15), controlPoint2: CGPoint(x: 42.69, y: 19.24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 42.55, y: 17.54))
        bezierPath.addCurve(to: CGPoint(x: 44.06, y: 17.19), controlPoint1: CGPoint(x: 43.14, y: 17.54), controlPoint2: CGPoint(x: 43.64, y: 17.42))
        bezierPath.addCurve(to: CGPoint(x: 45.01, y: 16.28), controlPoint1: CGPoint(x: 44.48, y: 16.96), controlPoint2: CGPoint(x: 44.8, y: 16.65))
        bezierPath.addCurve(to: CGPoint(x: 45.35, y: 15.07), controlPoint1: CGPoint(x: 45.24, y: 15.9), controlPoint2: CGPoint(x: 45.35, y: 15.5))
        bezierPath.addLine(to: CGPoint(x: 45.35, y: 13.66))
        bezierPath.addCurve(to: CGPoint(x: 44.91, y: 13.87), controlPoint1: CGPoint(x: 45.27, y: 13.73), controlPoint2: CGPoint(x: 45.13, y: 13.81))
        bezierPath.addCurve(to: CGPoint(x: 44.18, y: 14.04), controlPoint1: CGPoint(x: 44.69, y: 13.93), controlPoint2: CGPoint(x: 44.45, y: 13.99))
        bezierPath.addCurve(to: CGPoint(x: 43.37, y: 14.16), controlPoint1: CGPoint(x: 43.9, y: 14.08), controlPoint2: CGPoint(x: 43.63, y: 14.12))
        bezierPath.addCurve(to: CGPoint(x: 42.72, y: 14.24), controlPoint1: CGPoint(x: 43.11, y: 14.19), controlPoint2: CGPoint(x: 42.9, y: 14.22))
        bezierPath.addCurve(to: CGPoint(x: 41.59, y: 14.5), controlPoint1: CGPoint(x: 42.31, y: 14.29), controlPoint2: CGPoint(x: 41.93, y: 14.38))
        bezierPath.addCurve(to: CGPoint(x: 40.78, y: 15.04), controlPoint1: CGPoint(x: 41.25, y: 14.63), controlPoint2: CGPoint(x: 40.98, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 40.48, y: 15.95), controlPoint1: CGPoint(x: 40.58, y: 15.26), controlPoint2: CGPoint(x: 40.48, y: 15.57))
        bezierPath.addCurve(to: CGPoint(x: 41.07, y: 17.14), controlPoint1: CGPoint(x: 40.48, y: 16.47), controlPoint2: CGPoint(x: 40.68, y: 16.87))
        bezierPath.addCurve(to: CGPoint(x: 42.55, y: 17.54), controlPoint1: CGPoint(x: 41.45, y: 17.4), controlPoint2: CGPoint(x: 41.95, y: 17.54))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 55.3, y: 19.22))
        bezierPath.addCurve(to: CGPoint(x: 52.57, y: 18.5), controlPoint1: CGPoint(x: 54.24, y: 19.22), controlPoint2: CGPoint(x: 53.33, y: 18.98))
        bezierPath.addCurve(to: CGPoint(x: 50.82, y: 16.51), controlPoint1: CGPoint(x: 51.81, y: 18.02), controlPoint2: CGPoint(x: 51.23, y: 17.35))
        bezierPath.addCurve(to: CGPoint(x: 50.21, y: 13.6), controlPoint1: CGPoint(x: 50.41, y: 15.66), controlPoint2: CGPoint(x: 50.21, y: 14.69))
        bezierPath.addCurve(to: CGPoint(x: 50.84, y: 10.66), controlPoint1: CGPoint(x: 50.21, y: 12.49), controlPoint2: CGPoint(x: 50.42, y: 11.51))
        bezierPath.addCurve(to: CGPoint(x: 52.6, y: 8.67), controlPoint1: CGPoint(x: 51.25, y: 9.81), controlPoint2: CGPoint(x: 51.84, y: 9.14))
        bezierPath.addCurve(to: CGPoint(x: 55.27, y: 7.95), controlPoint1: CGPoint(x: 53.35, y: 8.19), controlPoint2: CGPoint(x: 54.25, y: 7.95))
        bezierPath.addCurve(to: CGPoint(x: 57.49, y: 8.41), controlPoint1: CGPoint(x: 56.1, y: 7.95), controlPoint2: CGPoint(x: 56.84, y: 8.1))
        bezierPath.addCurve(to: CGPoint(x: 59.06, y: 9.69), controlPoint1: CGPoint(x: 58.14, y: 8.71), controlPoint2: CGPoint(x: 58.66, y: 9.14))
        bezierPath.addCurve(to: CGPoint(x: 59.78, y: 11.61), controlPoint1: CGPoint(x: 59.46, y: 10.24), controlPoint2: CGPoint(x: 59.7, y: 10.88))
        bezierPath.addLine(to: CGPoint(x: 57.71, y: 11.61))
        bezierPath.addCurve(to: CGPoint(x: 56.93, y: 10.29), controlPoint1: CGPoint(x: 57.6, y: 11.1), controlPoint2: CGPoint(x: 57.34, y: 10.66))
        bezierPath.addCurve(to: CGPoint(x: 55.31, y: 9.74), controlPoint1: CGPoint(x: 56.53, y: 9.92), controlPoint2: CGPoint(x: 55.99, y: 9.74))
        bezierPath.addCurve(to: CGPoint(x: 53.75, y: 10.21), controlPoint1: CGPoint(x: 54.72, y: 9.74), controlPoint2: CGPoint(x: 54.2, y: 9.89))
        bezierPath.addCurve(to: CGPoint(x: 52.72, y: 11.53), controlPoint1: CGPoint(x: 53.31, y: 10.52), controlPoint2: CGPoint(x: 52.97, y: 10.96))
        bezierPath.addCurve(to: CGPoint(x: 52.35, y: 13.55), controlPoint1: CGPoint(x: 52.48, y: 12.1), controlPoint2: CGPoint(x: 52.35, y: 12.77))
        bezierPath.addCurve(to: CGPoint(x: 52.72, y: 15.61), controlPoint1: CGPoint(x: 52.35, y: 14.34), controlPoint2: CGPoint(x: 52.48, y: 15.03))
        bezierPath.addCurve(to: CGPoint(x: 53.74, y: 16.95), controlPoint1: CGPoint(x: 52.96, y: 16.18), controlPoint2: CGPoint(x: 53.3, y: 16.63))
        bezierPath.addCurve(to: CGPoint(x: 55.31, y: 17.42), controlPoint1: CGPoint(x: 54.19, y: 17.26), controlPoint2: CGPoint(x: 54.71, y: 17.42))
        bezierPath.addCurve(to: CGPoint(x: 56.4, y: 17.2), controlPoint1: CGPoint(x: 55.71, y: 17.42), controlPoint2: CGPoint(x: 56.08, y: 17.35))
        bezierPath.addCurve(to: CGPoint(x: 57.23, y: 16.56), controlPoint1: CGPoint(x: 56.73, y: 17.05), controlPoint2: CGPoint(x: 57.01, y: 16.84))
        bezierPath.addCurve(to: CGPoint(x: 57.71, y: 15.55), controlPoint1: CGPoint(x: 57.46, y: 16.28), controlPoint2: CGPoint(x: 57.62, y: 15.94))
        bezierPath.addLine(to: CGPoint(x: 59.78, y: 15.55))
        bezierPath.addCurve(to: CGPoint(x: 59.09, y: 17.44), controlPoint1: CGPoint(x: 59.7, y: 16.25), controlPoint2: CGPoint(x: 59.47, y: 16.88))
        bezierPath.addCurve(to: CGPoint(x: 57.55, y: 18.74), controlPoint1: CGPoint(x: 58.7, y: 17.99), controlPoint2: CGPoint(x: 58.19, y: 18.43))
        bezierPath.addCurve(to: CGPoint(x: 55.3, y: 19.22), controlPoint1: CGPoint(x: 56.91, y: 19.06), controlPoint2: CGPoint(x: 56.16, y: 19.22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 64.4, y: 15.3))
        bezierPath.addLine(to: CGPoint(x: 64.39, y: 12.71))
        bezierPath.addLine(to: CGPoint(x: 64.76, y: 12.71))
        bezierPath.addLine(to: CGPoint(x: 69.1, y: 8.09))
        bezierPath.addLine(to: CGPoint(x: 71.65, y: 8.09))
        bezierPath.addLine(to: CGPoint(x: 66.69, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 66.35, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 64.4, y: 15.3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 62.45, y: 19))
        bezierPath.addLine(to: CGPoint(x: 62.45, y: 4.45))
        bezierPath.addLine(to: CGPoint(x: 64.57, y: 4.45))
        bezierPath.addLine(to: CGPoint(x: 64.57, y: 19))
        bezierPath.addLine(to: CGPoint(x: 62.45, y: 19))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 69.34, y: 19))
        bezierPath.addLine(to: CGPoint(x: 65.43, y: 13.82))
        bezierPath.addLine(to: CGPoint(x: 66.89, y: 12.33))
        bezierPath.addLine(to: CGPoint(x: 71.94, y: 19))
        bezierPath.addLine(to: CGPoint(x: 69.34, y: 19))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 3.83, y: 10.78))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 10.78))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 12.78))
        bezier2Path.addLine(to: CGPoint(x: 3.83, y: 12.78))
        bezier2Path.addLine(to: CGPoint(x: 9.19, y: 18.14))
        bezier2Path.addLine(to: CGPoint(x: 7.78, y: 19.56))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 11.78))
        bezier2Path.addLine(to: CGPoint(x: 7.78, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 9.19, y: 5.41))
        bezier2Path.addLine(to: CGPoint(x: 3.83, y: 10.78))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfIconAdd: UIImage {
        if Cache.imageOfIconAdd != nil {
            return Cache.imageOfIconAdd!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
            CustomIcons.drawIconAdd()

        Cache.imageOfIconAdd = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconAdd!
    }

    @objc dynamic public class var imageOfIconArrow: UIImage {
        if Cache.imageOfIconArrow != nil {
            return Cache.imageOfIconArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconArrow()

        Cache.imageOfIconArrow = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconArrow!
    }

    @objc dynamic public class var imageOfIconCalendar: UIImage {
        if Cache.imageOfIconCalendar != nil {
            return Cache.imageOfIconCalendar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconCalendar()

        Cache.imageOfIconCalendar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconCalendar!
    }

    @objc dynamic public class var imageOfIconCheck: UIImage {
        if Cache.imageOfIconCheck != nil {
            return Cache.imageOfIconCheck!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconCheck()

        Cache.imageOfIconCheck = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconCheck!
    }

    @objc dynamic public class var imageOfIconClose: UIImage {
        if Cache.imageOfIconClose != nil {
            return Cache.imageOfIconClose!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconClose()

        Cache.imageOfIconClose = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconClose!
    }

    @objc dynamic public class var imageOfIconEdit: UIImage {
        if Cache.imageOfIconEdit != nil {
            return Cache.imageOfIconEdit!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconEdit()

        Cache.imageOfIconEdit = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconEdit!
    }

    @objc dynamic public class var imageOfIconFlag: UIImage {
        if Cache.imageOfIconFlag != nil {
            return Cache.imageOfIconFlag!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconFlag()

        Cache.imageOfIconFlag = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconFlag!
    }

    @objc dynamic public class var imageOfIconLocation: UIImage {
        if Cache.imageOfIconLocation != nil {
            return Cache.imageOfIconLocation!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconLocation()

        Cache.imageOfIconLocation = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconLocation!
    }

    @objc dynamic public class var imageOfIconSearch: UIImage {
        if Cache.imageOfIconSearch != nil {
            return Cache.imageOfIconSearch!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconSearch()

        Cache.imageOfIconSearch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconSearch!
    }

    @objc dynamic public class var imageOfIconWarning: UIImage {
        if Cache.imageOfIconWarning != nil {
            return Cache.imageOfIconWarning!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            CustomIcons.drawIconWarning()

        Cache.imageOfIconWarning = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconWarning!
    }

    @objc dynamic public class var imageOfIconBackButton: UIImage {
        if Cache.imageOfIconBackButton != nil {
            return Cache.imageOfIconBackButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 24), false, 0)
            CustomIcons.drawIconBackButton()

        Cache.imageOfIconBackButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconBackButton!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var iconAddTargets: [AnyObject]! {
        get { return Cache.iconAddTargets }
        set {
            Cache.iconAddTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconAdd)
            }
        }
    }

    @objc @IBOutlet dynamic var iconArrowTargets: [AnyObject]! {
        get { return Cache.iconArrowTargets }
        set {
            Cache.iconArrowTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconArrow)
            }
        }
    }

    @objc @IBOutlet dynamic var iconCalendarTargets: [AnyObject]! {
        get { return Cache.iconCalendarTargets }
        set {
            Cache.iconCalendarTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconCalendar)
            }
        }
    }

    @objc @IBOutlet dynamic var iconCheckTargets: [AnyObject]! {
        get { return Cache.iconCheckTargets }
        set {
            Cache.iconCheckTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconCheck)
            }
        }
    }

    @objc @IBOutlet dynamic var iconCloseTargets: [AnyObject]! {
        get { return Cache.iconCloseTargets }
        set {
            Cache.iconCloseTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconClose)
            }
        }
    }

    @objc @IBOutlet dynamic var iconEditTargets: [AnyObject]! {
        get { return Cache.iconEditTargets }
        set {
            Cache.iconEditTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconEdit)
            }
        }
    }

    @objc @IBOutlet dynamic var iconFlagTargets: [AnyObject]! {
        get { return Cache.iconFlagTargets }
        set {
            Cache.iconFlagTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconFlag)
            }
        }
    }

    @objc @IBOutlet dynamic var iconLocationTargets: [AnyObject]! {
        get { return Cache.iconLocationTargets }
        set {
            Cache.iconLocationTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconLocation)
            }
        }
    }

    @objc @IBOutlet dynamic var iconSearchTargets: [AnyObject]! {
        get { return Cache.iconSearchTargets }
        set {
            Cache.iconSearchTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconSearch)
            }
        }
    }

    @objc @IBOutlet dynamic var iconWarningTargets: [AnyObject]! {
        get { return Cache.iconWarningTargets }
        set {
            Cache.iconWarningTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconWarning)
            }
        }
    }

    @objc @IBOutlet dynamic var iconBackButtonTargets: [AnyObject]! {
        get { return Cache.iconBackButtonTargets }
        set {
            Cache.iconBackButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconBackButton)
            }
        }
    }




    @objc(CustomIconsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
