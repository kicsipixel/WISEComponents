//
//  CustomIcons.swift
//  WISEComponents
//
//  Created by Szabolcs Toth on 05.08.2022.
//  Copyright Â© 2022 purzelbaum.hu. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

import UIKit

public class CustomIcons: NSObject {

    //// Cache

    private struct Cache {
        static var imageOfIconAdd: UIImage?
        static var iconAddTargets: [AnyObject]?
        static var imageOfIconArrow: UIImage?
        static var iconArrowTargets: [AnyObject]?
        static var imageOfIconCalendar: UIImage?
        static var iconCalendarTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawIconAdd(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)

        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 31, y: 17.9))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 19.4), controlPoint1: CGPoint(x: 31, y: 18.7), controlPoint2: CGPoint(x: 30.3, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 30.5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 32), controlPoint1: CGPoint(x: 18.6, y: 31.3), controlPoint2: CGPoint(x: 17.9, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 15.6, y: 30.5), controlPoint1: CGPoint(x: 16.3, y: 32), controlPoint2: CGPoint(x: 15.6, y: 31.3))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 19.4))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 17.9), controlPoint1: CGPoint(x: 3.7, y: 19.4), controlPoint2: CGPoint(x: 3, y: 18.7))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 16.4), controlPoint1: CGPoint(x: 3, y: 17.1), controlPoint2: CGPoint(x: 3.7, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 5.5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 4), controlPoint1: CGPoint(x: 15.6, y: 4.7), controlPoint2: CGPoint(x: 16.3, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 18.6, y: 5.5), controlPoint1: CGPoint(x: 17.9, y: 4), controlPoint2: CGPoint(x: 18.6, y: 4.7))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 29.5, y: 16.4))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 17.9), controlPoint1: CGPoint(x: 30.3, y: 16.4), controlPoint2: CGPoint(x: 31, y: 17.1))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()

        context.restoreGState()

    }

    @objc dynamic public class func drawIconArrow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)

        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24.3, y: 15.85))
        bezierPath.addCurve(to: CGPoint(x: 24.3, y: 16.15), controlPoint1: CGPoint(x: 24.3, y: 15.95), controlPoint2: CGPoint(x: 24.3, y: 16.05))
        bezierPath.addCurve(to: CGPoint(x: 23.9, y: 16.95), controlPoint1: CGPoint(x: 24.3, y: 16.45), controlPoint2: CGPoint(x: 24.1, y: 16.75))
        bezierPath.addLine(to: CGPoint(x: 11.7, y: 29.15))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 29.15), controlPoint1: CGPoint(x: 11.1, y: 29.75), controlPoint2: CGPoint(x: 10.1, y: 29.75))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 28.05), controlPoint1: CGPoint(x: 9.2, y: 28.85), controlPoint2: CGPoint(x: 9, y: 28.45))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 26.95), controlPoint1: CGPoint(x: 9, y: 27.65), controlPoint2: CGPoint(x: 9.1, y: 27.25))
        bezierPath.addLine(to: CGPoint(x: 20.7, y: 15.75))
        bezierPath.addLine(to: CGPoint(x: 9.4, y: 4.65))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 3.55), controlPoint1: CGPoint(x: 9.1, y: 4.35), controlPoint2: CGPoint(x: 9, y: 3.95))
        bezierPath.addCurve(to: CGPoint(x: 9.4, y: 2.45), controlPoint1: CGPoint(x: 9, y: 3.15), controlPoint2: CGPoint(x: 9.1, y: 2.75))
        bezierPath.addCurve(to: CGPoint(x: 11.6, y: 2.45), controlPoint1: CGPoint(x: 10, y: 1.85), controlPoint2: CGPoint(x: 11, y: 1.85))
        bezierPath.addLine(to: CGPoint(x: 23.8, y: 14.65))
        bezierPath.addCurve(to: CGPoint(x: 24.3, y: 15.85), controlPoint1: CGPoint(x: 24.1, y: 14.95), controlPoint2: CGPoint(x: 24.3, y: 15.45))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()

        context.restoreGState()

    }

    @objc dynamic public class func drawIconCalendar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)

        //// Color Declarations
        let strokeColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        let fillColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 1.000)

        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Rectangle
        let rectanglePath = UIBezierPath(rect: CGRect(x: 2.03, y: 2, width: 27.35, height: 28))
        rectanglePath.addClip()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 28.31, y: 12.78))
        bezierPath.addLine(to: CGPoint(x: 28.31, y: 25.03))
        bezierPath.addCurve(to: CGPoint(x: 24.29, y: 29.05), controlPoint1: CGPoint(x: 28.31, y: 27.25), controlPoint2: CGPoint(x: 26.51, y: 29.05))
        bezierPath.addLine(to: CGPoint(x: 7.07, y: 29.05))
        bezierPath.addCurve(to: CGPoint(x: 3.06, y: 25.03), controlPoint1: CGPoint(x: 4.85, y: 29.05), controlPoint2: CGPoint(x: 3.06, y: 27.25))
        bezierPath.addLine(to: CGPoint(x: 3.06, y: 12.78))
        bezierPath.addLine(to: CGPoint(x: 28.31, y: 12.78))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 28.31, y: 11.3))
        bezier2Path.addLine(to: CGPoint(x: 28.31, y: 12.67))
        bezier2Path.addLine(to: CGPoint(x: 3.06, y: 12.67))
        bezier2Path.addLine(to: CGPoint(x: 3.06, y: 11.3))
        bezier2Path.addCurve(to: CGPoint(x: 7.07, y: 7.28), controlPoint1: CGPoint(x: 3.06, y: 9.08), controlPoint2: CGPoint(x: 4.85, y: 7.28))
        bezier2Path.addLine(to: CGPoint(x: 7.6, y: 7.28))
        bezier2Path.addCurve(to: CGPoint(x: 7.6, y: 4.43), controlPoint1: CGPoint(x: 7.6, y: 6.33), controlPoint2: CGPoint(x: 7.6, y: 5.38))
        bezier2Path.addCurve(to: CGPoint(x: 8.97, y: 3.06), controlPoint1: CGPoint(x: 7.49, y: 3.69), controlPoint2: CGPoint(x: 8.13, y: 3.06))
        bezier2Path.addCurve(to: CGPoint(x: 10.45, y: 4.54), controlPoint1: CGPoint(x: 9.71, y: 3.06), controlPoint2: CGPoint(x: 10.45, y: 3.69))
        bezier2Path.addLine(to: CGPoint(x: 10.45, y: 7.39))
        bezier2Path.addLine(to: CGPoint(x: 20.6, y: 7.39))
        bezier2Path.addCurve(to: CGPoint(x: 20.6, y: 4.54), controlPoint1: CGPoint(x: 20.6, y: 6.44), controlPoint2: CGPoint(x: 20.6, y: 5.49))
        bezier2Path.addCurve(to: CGPoint(x: 22.08, y: 3.06), controlPoint1: CGPoint(x: 20.6, y: 3.69), controlPoint2: CGPoint(x: 21.23, y: 3.06))
        bezier2Path.addCurve(to: CGPoint(x: 23.55, y: 4.54), controlPoint1: CGPoint(x: 22.92, y: 3.06), controlPoint2: CGPoint(x: 23.55, y: 3.69))
        bezier2Path.addCurve(to: CGPoint(x: 23.55, y: 7.39), controlPoint1: CGPoint(x: 23.55, y: 5.49), controlPoint2: CGPoint(x: 23.55, y: 6.44))
        bezier2Path.addLine(to: CGPoint(x: 24.51, y: 7.39))
        bezier2Path.addCurve(to: CGPoint(x: 28.31, y: 11.3), controlPoint1: CGPoint(x: 26.51, y: 7.39), controlPoint2: CGPoint(x: 28.31, y: 9.18))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 23.13, y: 25.56))
        bezier3Path.addLine(to: CGPoint(x: 20.17, y: 25.56))
        bezier3Path.addCurve(to: CGPoint(x: 18.59, y: 23.98), controlPoint1: CGPoint(x: 19.33, y: 25.56), controlPoint2: CGPoint(x: 18.59, y: 24.82))
        bezier3Path.addLine(to: CGPoint(x: 18.59, y: 21.02))
        bezier3Path.addCurve(to: CGPoint(x: 20.17, y: 19.43), controlPoint1: CGPoint(x: 18.59, y: 20.17), controlPoint2: CGPoint(x: 19.33, y: 19.43))
        bezier3Path.addLine(to: CGPoint(x: 23.13, y: 19.43))
        bezier3Path.addCurve(to: CGPoint(x: 24.72, y: 21.02), controlPoint1: CGPoint(x: 23.98, y: 19.43), controlPoint2: CGPoint(x: 24.72, y: 20.17))
        bezier3Path.addLine(to: CGPoint(x: 24.72, y: 23.98))
        bezier3Path.addCurve(to: CGPoint(x: 23.13, y: 25.56), controlPoint1: CGPoint(x: 24.72, y: 24.82), controlPoint2: CGPoint(x: 23.98, y: 25.56))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 2
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()

        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfIconAdd: UIImage {
        if Cache.imageOfIconAdd != nil {
            return Cache.imageOfIconAdd!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
        CustomIcons.drawIconAdd()

        Cache.imageOfIconAdd = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconAdd!
    }

    @objc dynamic public class var imageOfIconArrow: UIImage {
        if Cache.imageOfIconArrow != nil {
            return Cache.imageOfIconArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        CustomIcons.drawIconArrow()

        Cache.imageOfIconArrow = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconArrow!
    }

    @objc dynamic public class var imageOfIconCalendar: UIImage {
        if Cache.imageOfIconCalendar != nil {
            return Cache.imageOfIconCalendar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
        CustomIcons.drawIconCalendar()

        Cache.imageOfIconCalendar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIconCalendar!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var iconAddTargets: [AnyObject]! {
        get { return Cache.iconAddTargets }
        set {
            Cache.iconAddTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconAdd)
            }
        }
    }

    @IBOutlet dynamic var iconArrowTargets: [AnyObject]! {
        get { return Cache.iconArrowTargets }
        set {
            Cache.iconArrowTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconArrow)
            }
        }
    }

    @IBOutlet dynamic var iconCalendarTargets: [AnyObject]! {
        get { return Cache.iconCalendarTargets }
        set {
            Cache.iconCalendarTargets = newValue
            for target: AnyObject in newValue {
                _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIconCalendar)
            }
        }
    }

    @objc(CustomIconsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
