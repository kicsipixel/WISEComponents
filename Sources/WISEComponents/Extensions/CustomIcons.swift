//
//  CustomIcons.swift
//  WISEComponents
//
//  Created by Szabolcs Toth on 05.08.2022.
//  Copyright Â© 2022 purzelbaum.hu. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class CustomIcons : NSObject {
    
    //// Cache
    
    private struct Cache {
        static let oxfordBlue: UIColor = UIColor(red: 0.094, green: 0.137, blue: 0.298, alpha: 1.000)
        static let oxfordBlueDisabled: UIColor = UIColor(red: 0.067, green: 0.133, blue: 0.302, alpha: 0.400)
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let glaucous: UIColor = UIColor(red: 0.357, green: 0.518, blue: 0.769, alpha: 1.000)
        static let whiteDisabled: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.400)
        static var imageOfIcon_add: UIImage?
        static var icon_addTargets: [AnyObject]?
    }
    
    //// Colors
    
    @objc dynamic public class var oxfordBlue: UIColor { return Cache.oxfordBlue }
    @objc dynamic public class var oxfordBlueDisabled: UIColor { return Cache.oxfordBlueDisabled }
    @objc dynamic public class var white: UIColor { return Cache.white }
    @objc dynamic public class var glaucous: UIColor { return Cache.glaucous }
    @objc dynamic public class var whiteDisabled: UIColor { return Cache.whiteDisabled }
    
    //// Drawing Methods
    
    @objc dynamic public class func drawIcon_add(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 35, height: 35), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 35, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 35, y: resizedFrame.height / 35)
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 31, y: 17.9))
        bezierPath.addCurve(to: CGPoint(x: 29.5, y: 19.4), controlPoint1: CGPoint(x: 31, y: 18.7), controlPoint2: CGPoint(x: 30.3, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 30.5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 32), controlPoint1: CGPoint(x: 18.6, y: 31.3), controlPoint2: CGPoint(x: 17.9, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 15.6, y: 30.5), controlPoint1: CGPoint(x: 16.3, y: 32), controlPoint2: CGPoint(x: 15.6, y: 31.3))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 19.4))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 19.4))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 17.9), controlPoint1: CGPoint(x: 3.7, y: 19.4), controlPoint2: CGPoint(x: 3, y: 18.7))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 16.4), controlPoint1: CGPoint(x: 3, y: 17.1), controlPoint2: CGPoint(x: 3.7, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 5.5))
        bezierPath.addCurve(to: CGPoint(x: 17.1, y: 4), controlPoint1: CGPoint(x: 15.6, y: 4.7), controlPoint2: CGPoint(x: 16.3, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 18.6, y: 5.5), controlPoint1: CGPoint(x: 17.9, y: 4), controlPoint2: CGPoint(x: 18.6, y: 4.7))
        bezierPath.addLine(to: CGPoint(x: 18.6, y: 16.4))
        bezierPath.addLine(to: CGPoint(x: 29.5, y: 16.4))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 17.9), controlPoint1: CGPoint(x: 30.3, y: 16.4), controlPoint2: CGPoint(x: 31, y: 17.1))
        bezierPath.close()
        CustomIcons.oxfordBlue.setFill()
        bezierPath.fill()
        CustomIcons.oxfordBlue.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()
        
    }
    
    //// Generated Images
    
    @objc dynamic public class var imageOfIcon_add: UIImage {
        if Cache.imageOfIcon_add != nil {
            return Cache.imageOfIcon_add!
        }
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 35, height: 35), false, 0)
        CustomIcons.drawIcon_add()
        
        Cache.imageOfIcon_add = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return Cache.imageOfIcon_add!
    }
    
    //// Customization Infrastructure
    
    @objc @IBOutlet dynamic var icon_addTargets: [AnyObject]! {
        get { return Cache.icon_addTargets }
        set {
            Cache.icon_addTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: CustomIcons.imageOfIcon_add)
            }
        }
    }
    
    
    
    
    @objc(CustomIconsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
